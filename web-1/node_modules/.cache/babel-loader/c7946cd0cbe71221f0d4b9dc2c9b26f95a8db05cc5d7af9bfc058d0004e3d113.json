{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { ref } from 'vue'\nimport axios from 'axios';\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      input: 'hhhh',\n      selectedOption: 'option1',\n      options: [{\n        value: 'option1',\n        label: '选项 1'\n      }, {\n        value: 'option2',\n        label: '选项 2'\n      }, {\n        value: 'option3',\n        label: '选项 3'\n      }],\n      messageList: []\n    };\n  },\n  computed: {\n    filteredOptions() {\n      return this.options.filter(option => option.value === this.selectedOption);\n    }\n  },\n  methods: {\n    clearInput() {\n      this.input = '';\n    },\n    async getInput() {\n      try {\n        const response = await axios.post('/api/getAnswer', {\n          question: this.input\n        });\n        // 假设回答在response.data.answer中\n        this.messageList.push({\n          id: this.messageList.length + 1,\n          message: this.input,\n          answer: response.data.answer\n        });\n        // 清空输入框以便下一次输入\n        this.input = '';\n      } catch (error) {\n        console.error('API调用失败', error);\n        // 处理错误，例如显示错误消息\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","msg","String","data","input","selectedOption","options","value","label","messageList","computed","filteredOptions","filter","option","methods","clearInput","getInput","response","post","question","push","id","length","message","answer","error","console"],"sources":["D:\\CITYU\\a_cityu_cs\\semester2\\cs6493NLP\\chatbot-github\\Chatbot_Auto_Prompt\\web-1\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\r\n  <div class=\"common-layout\">\r\n    <el-container>\r\n      <el-aside class=\"aside-with-image\" width=\"200px\"></el-aside>\r\n      <el-container>\r\n        <el-header class=\"header-with-image\" >Chatbot Auto Prompt\r\n          <div>\r\n            <select v-model=\"selectedOption\">\r\n              <option v-for=\"option in filteredOptions\" :key=\"option.value\" :value=\"option.value\">\r\n                {{ option.label }}\r\n              </option>\r\n            </select>\r\n\r\n            <p v-for=\"option in filteredOptions\" :key=\"option.value\">\r\n              <template v-if=\"selectedOption === option.value\">\r\n                {{ option.label }} 被选中。\r\n              </template>\r\n            </p>\r\n          </div>\r\n        </el-header>\r\n        <el-main>\r\n          <div class=\"mainContent\">\r\n            <el-scrollbar>\r\n              <div class=\"contentblock\"> \r\n                <div v-for=\"item in messageList\" :key=\"item.id\" class=\"message\">\r\n                  <p class=\"question\">问题: {{ item.message }}</p>\r\n                  <p class=\"answer\">回答: {{ item.answer }}</p>\r\n                </div>\r\n              </div>\r\n            </el-scrollbar>\r\n          </div>\r\n        </el-main>\r\n        <el-footer>\r\n          <el-input v-model=\"input\" style=\"width: 100%\" placeholder=\"Please input\">\r\n              <template #prepend>\r\n                <el-button  @click=\"clearInput\"><i class=\"custom-icon-clear\"></i></el-button>\r\n              </template>\r\n              <template #append>\r\n                <el-button  @click=\"getInput\" ><i class=\"custom-icon-send\"></i></el-button>\r\n              </template>\r\n            </el-input>\r\n          </el-footer>\r\n      </el-container>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import { ref } from 'vue'\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'HelloWorld',\r\n  props: {\r\n    msg: String\r\n  },\r\n  data() {\r\n    return{\r\n      input: 'hhhh',\r\n      selectedOption: 'option1',\r\n      options: [\r\n        { value: 'option1', label: '选项 1' },\r\n        { value: 'option2', label: '选项 2' },\r\n        { value: 'option3', label: '选项 3' }\r\n      ],\r\n      messageList: [],\r\n    }\r\n  },\r\n  computed: {\r\n    filteredOptions() {\r\n      return this.options.filter((option) => option.value === this.selectedOption);\r\n    },\r\n  },\r\n  methods:{\r\n    clearInput(){\r\n      this.input='';\r\n    },\r\n    async getInput() {\r\n      try {\r\n        const response = await axios.post('/api/getAnswer', { question: this.input });\r\n        // 假设回答在response.data.answer中\r\n        this.messageList.push({\r\n          id: this.messageList.length + 1,\r\n          message: this.input,\r\n          answer: response.data.answer\r\n        });\r\n        // 清空输入框以便下一次输入\r\n        this.input = '';\r\n      } catch (error) {\r\n        console.error('API调用失败', error);\r\n        // 处理错误，例如显示错误消息\r\n      }\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n.mainContent{\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #FAFAFA;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.contentblock{\r\n  width: 95%;\r\n  height: 500px;\r\n}\r\n.custom-icon-send {\r\n  background-image: url(\"cil-send.svg\");\r\n  width: 25px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  height: 20px;\r\n\r\n}\r\n.custom-icon-clear {\r\n  background-image: url(\"trash.svg\");\r\n  width: 25px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  height: 20px;\r\n}\r\n.aside-with-image {\r\n  background-image: url(\"undraw_chat_bot_re_e2gj.svg\");\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  background-size: contain;\r\n}\r\n.header-with-image {\r\n  font-weight: bold;\r\n  background-image: url(\"undraw_chat_re_re1u.svg\");\r\n  background-repeat: no-repeat;\r\n  background-position: 20px center;\r\n  background-size: contain;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* 将消息气泡右对齐 */\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.question {\r\n  background-color: #dcf8c6; /* 问题气泡的背景颜色 */\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  align-self: flex-start; /* 问题气泡左对齐 */\r\n}\r\n\r\n.answer {\r\n  background-color: #e5e5ea; /* 回答气泡的背景颜色 */\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  align-self: flex-end; /* 回答气泡右对齐 */\r\n}\r\n</style>\r\n"],"mappings":";AAgDA;AACA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,GAAG,EAAEC;EACP,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAM;MACJC,KAAK,EAAE,MAAM;MACbC,cAAc,EAAE,SAAS;MACzBC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAO,CAAC,EACnC;QAAED,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAO,CAAC,EACnC;QAAED,KAAK,EAAE,SAAS;QAAEC,KAAK,EAAE;MAAO,EACnC;MACDC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACL,OAAO,CAACM,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACN,KAAI,KAAM,IAAI,CAACF,cAAc,CAAC;IAC9E;EACF,CAAC;EACDS,OAAO,EAAC;IACNC,UAAUA,CAAA,EAAE;MACV,IAAI,CAACX,KAAK,GAAC,EAAE;IACf,CAAC;IACD,MAAMY,QAAQA,CAAA,EAAG;MACf,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMnB,KAAK,CAACoB,IAAI,CAAC,gBAAgB,EAAE;UAAEC,QAAQ,EAAE,IAAI,CAACf;QAAM,CAAC,CAAC;QAC7E;QACA,IAAI,CAACK,WAAW,CAACW,IAAI,CAAC;UACpBC,EAAE,EAAE,IAAI,CAACZ,WAAW,CAACa,MAAK,GAAI,CAAC;UAC/BC,OAAO,EAAE,IAAI,CAACnB,KAAK;UACnBoB,MAAM,EAAEP,QAAQ,CAACd,IAAI,CAACqB;QACxB,CAAC,CAAC;QACF;QACA,IAAI,CAACpB,KAAI,GAAI,EAAE;MACjB,EAAE,OAAOqB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/B;MACF;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}